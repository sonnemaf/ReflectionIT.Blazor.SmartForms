@typeparam TItem
@inherits SmartBase<TItem>
@using System.Linq.Expressions
@using System.Reflection
@using System.ComponentModel.DataAnnotations

<div class="form-group @(IsRow ? "row" : null) @CssClassRequired">
    @if (DisplayLabel) {
        string colCss = string.Empty;
        if (LabelColumnSizeMedium.HasValue) {
            colCss = "col-md-" + LabelColumnSizeMedium.Value;
        }
        if (LabelColumSizeLarge.HasValue) {
            colCss += " col-lg-" + LabelColumSizeLarge.Value;
        }
        <label class="@CssClassLabel @colCss" for="@(Id ?? GetId())">@(DisplayName ?? GetDisplayName())</label>
    }
    @if (IsRow) {
        string colCss = string.Empty;
        if (LabelColumnSizeMedium.HasValue) {
            colCss = "col-md-" + (12 - LabelColumnSizeMedium.Value);
        }
        if (LabelColumSizeLarge.HasValue) {
            colCss += " col-lg-" + (12 - LabelColumSizeLarge.Value);
        }
        <div class="@colCss">
            @{
                GenerateInput();
            }
        </div>
    } else {
        GenerateInput();
    }
    @if (DisplayValidationMessage) {
        string colCss = string.Empty;
        if (LabelColumnSizeMedium.HasValue) {
            colCss = "offset-md-" + LabelColumnSizeMedium.Value + " col-md-" + (12 - LabelColumnSizeMedium.Value);
        }
        if (LabelColumSizeLarge.HasValue) {
            colCss += " offset-lg-" + LabelColumSizeLarge.Value + " col-lg-" + (12 - LabelColumSizeLarge.Value);
        }
        <div class="@CssClassValidation @colCss"><ValidationMessage TValue="@TItem" For="@For" /></div>
    }
</div>

@{
    void GenerateInput() {
        <div class="input-group @EditContext.FieldCssClass(For)">
            @if (!string.IsNullOrEmpty(Prefix)) {
                <div class="input-group-prepend"><span class="input-group-text">@Prefix</span></div>
            }
            <select class="@CssClassInput @CssClass" id="@(Id ?? GetId())"
                    @bind="@CurrentValue"
                    @attributes="this.AdditionalAttributes">
                @foreach (var value in Enum.GetValues(typeof(TItem))) {
                    <option>@value</option>
                }
            </select>
            @if (!string.IsNullOrEmpty(Suffix)) {
                <div class="input-group-append"><span class="input-group-text">@Suffix</span></div>
            }
        </div>
    }
}
 


