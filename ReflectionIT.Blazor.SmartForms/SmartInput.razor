@typeparam TItem
@inherits SmartBase<TItem>
@using System.Linq.Expressions
@using System.Reflection
@using System.ComponentModel.DataAnnotations
<div class="form-group @(IsRow ? "row" : null) @CssClassRequired">
    @if (DisplayLabel) {
        string colCss = string.Empty;
        if (LabelColumnSizeMedium.HasValue) {
            colCss = "col-md-" + LabelColumnSizeMedium.Value;
        }
        if (LabelColumSizeLarge.HasValue) {
            colCss += " col-lg-" + LabelColumSizeLarge.Value;
        }
        <label class="@CssClassLabel @colCss" for="@(Id ?? GetId())">@(DisplayName ?? GetDisplayName())</label>
    }
    @if (IsRow) {
        string colCss = string.Empty;
        if (LabelColumnSizeMedium.HasValue) {
            colCss = "col-md-" + (12 - LabelColumnSizeMedium.Value);
        }
        if (LabelColumSizeLarge.HasValue) {
            colCss += " col-lg-" + (12 - LabelColumSizeLarge.Value);
        }
        <div class="@colCss">
            @{
                GenerateInput();
            }
        </div>
    } else {
        GenerateInput();
    }
    @if (DisplayValidationMessage) {
        string colCss = string.Empty;
        if (LabelColumnSizeMedium.HasValue) {
            colCss = "offset-md-" + LabelColumnSizeMedium.Value + " col-md-" + (12 - LabelColumnSizeMedium.Value);
        }
        if (LabelColumSizeLarge.HasValue) {
            colCss += " offset-lg-" + LabelColumSizeLarge.Value + " col-lg-" + (12 - LabelColumSizeLarge.Value);
        }
        <div class="@CssClassValidation @colCss"><ValidationMessage TValue="@TItem" For="@For" /></div>
    }
</div>

@{
    void GenerateInput() {
        <div class="input-group @EditContext.FieldCssClass(For)">
            @if (!string.IsNullOrEmpty(Prefix)) {
                <div class="input-group-prepend"><span class="input-group-text">@Prefix</span></div>
            }
            <input class="@CssClassInput @CssClass" id="@(Id ?? GetId())"
                   @bind="@CurrentValue"
                   @attributes="this.AdditionalAttributes" />
            @if (!string.IsNullOrEmpty(Suffix)) {
                <div class="input-group-append"><span class="input-group-text">@Suffix</span></div>
            }
        </div>
    }
}

@code {

    protected override void OnParametersSet() {

        var dict = this.AdditionalAttributes is null ? new Dictionary<string, object>() : new Dictionary<string, object>(this.AdditionalAttributes, StringComparer.OrdinalIgnoreCase);
        base.OnParametersSet();

        var type = typeof(TItem);
        if (IsNumericType(type)) {
            dict["type"] = "number";
        }
        if (type == typeof(DateTime) || type == typeof(DateTime?)) {
            dict["type"] = "date";
        }

        var expression = (MemberExpression)For.Body;
        var range = expression.Member.GetCustomAttribute<RangeAttribute>();
        if (range is not null) {
            if (range.Minimum is not null && !dict.ContainsKey("min")) {
                dict["min"] = range.Minimum;
            }
            if (range.Maximum is not null && !dict.ContainsKey("max")) {
                dict["max"] = range.Maximum;
            }
        }

        var stringLength = expression.Member.GetCustomAttribute<StringLengthAttribute>();
        if (stringLength is not null && !dict.ContainsKey("maxlength")) {
            dict["maxlength"] = stringLength.MaximumLength;
        }

        var RequiredAttribute = expression.Member.GetCustomAttribute<RequiredAttribute>();
        if (RequiredAttribute is not null) {
            if (!dict.ContainsKey("required")) {
                dict["required"] = string.Empty;
            }
            CssClassRequired ??= "required";
        }

        if (dict.Count > 0) {
            this.AdditionalAttributes = dict;
        }
    }
}


