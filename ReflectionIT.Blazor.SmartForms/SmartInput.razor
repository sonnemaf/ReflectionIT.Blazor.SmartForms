@typeparam TItem
@inherits InputBase<TItem>

<div class="@CssClassDiv @(IsRow ? "row" : null) @CssClassRequired">
    @if (DisplayLabel) {
        string colCss = string.Empty;
        if (LabelColumnSizeMedium.HasValue) {
            colCss = "col-md-" + LabelColumnSizeMedium.Value;
        }
        if (LabelColumSizeLarge.HasValue) {
            colCss += " col-lg-" + LabelColumSizeLarge.Value;
        }
        if (IsCheckbox) {
            if (!string.IsNullOrEmpty(colCss)) {
                <div class="@colCss"></div>
            }
        } else {
            <label class="@CssClassLabel @colCss" for="@(Id ?? GetId())">@GetDisplayName()</label>
        }
    }
    @if (IsRow) {
        string colCss = string.Empty;
        if (LabelColumnSizeMedium.HasValue) {
            colCss = "col-md-" + (12 - LabelColumnSizeMedium.Value);
        }
        if (LabelColumSizeLarge.HasValue) {
            colCss += " col-lg-" + (12 - LabelColumSizeLarge.Value);
        }
        <div class="@colCss">
            @{
                Generate();
            }
        </div>
    } else {
        Generate();
    }
    @if (DisplayValidationMessage) {
        string colCss = CssClassValidation;
        if (LabelColumnSizeMedium.HasValue) {
            colCss += " offset-md-" + LabelColumnSizeMedium.Value + " col-md-" + (12 - LabelColumnSizeMedium.Value);
        }
        if (LabelColumSizeLarge.HasValue) {
            colCss += " offset-lg-" + LabelColumSizeLarge.Value + " col-lg-" + (12 - LabelColumSizeLarge.Value);
        }
        <ValidationMessage class="@colCss" TValue="@TItem" For="ValueExpression" />
    }
</div>

@{
    void Generate() {
        var type = typeof(TItem);
        @if (type.IsEnum) {
            GenerateEnumSelect();
        } else if (IsCheckbox) {
            GenerateCheckbox();
        } else if (IsDate) {
            GenerateInputDate();
        } else {
            GenerateInput();
        }
    }

    void GenerateInput() {
        <div class="input-group @EditContext.FieldCssClass(ValueExpression)">
            @if (!string.IsNullOrEmpty(Prefix)) {
                <div class="input-group-prepend"><span class="input-group-text">@Prefix</span></div>
            }

            <input class="@CssClassInput @CssClass"
                   id="@(Id ?? GetId())"
                   name="@this.NameAttributeValue"
                   @bind="@CurrentValue"
                   @attributes="this.AdditionalAttributes" />

            @if (!string.IsNullOrEmpty(Suffix)) {
                <div class="input-group-append"><span class="input-group-text">@Suffix</span></div>
            }
        </div>
    }

    void GenerateInputDate() {
        var css = CssClassInput + " " + CssClass;
        <div class="input-group">
            @if (!string.IsNullOrEmpty(Prefix)) {
                <div class="input-group-prepend"><span class="input-group-text">@Prefix</span></div>
            }
            <InputDate id="@(Id ?? GetId())"
                       class="@css"
                       TValue="@TItem"
                       @bind-Value="@CurrentValue"
                       name="@this.NameAttributeValue"
                       @attributes="this.AdditionalAttributes" />
            @if (!string.IsNullOrEmpty(Suffix)) {
                <div class="input-group-append"><span class="input-group-text">@Suffix</span></div>
            }
        </div>
    }

    void GenerateCheckbox() {
        <div class="form-check">
            <input class="@CssClassInput @CssClass" id="@(Id ?? GetId())"
                   name="@this.NameAttributeValue"
                   type="checkbox"
                   value="True"
                   @bind="@CurrentValue"
                   @attributes="this.AdditionalAttributes" />
            <label class="@CssClassLabel" for="@(Id ?? GetId())">@GetDisplayName()</label>
        </div>
    }

    void GenerateEnumSelect() {
        <select class="@CssClassInput @CssClass" id="@(Id ?? GetId())"
                name="@this.NameAttributeValue"
                @bind="@CurrentValue"
                @attributes="this.AdditionalAttributes">
            @foreach (var value in Enum.GetValues(typeof(TItem))) {
                <option value="@value">@GetDisplayName(value)</option>
            }
        </select>
    }
}

